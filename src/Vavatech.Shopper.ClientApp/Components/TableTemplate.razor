@typeparam TItem

<table class="table table-hover">
    <thead>
        <tr>
            @HeaderTemplate       
        </tr>
    </thead>

    <tbody>
        <Virtualize ItemsProvider="LoadItems" Context="item">
            <ItemContent>            
                <tr>
                    @RowTemplate(item)
                </tr>
            </ItemContent>
            <Placeholder>
                <LoadingComponent Message="Loading..." />
            </Placeholder>

           

        </Virtualize>
@*        @foreach (var item in Items)
        {
            <tr>
                @RowTemplate(item)
            </tr>
        }
*@    </tbody>
</table>

@code {

    [Parameter]
    public RenderFragment HeaderTemplate { get; set; }

    [Parameter]
    public RenderFragment<TItem> RowTemplate { get; set; }

    [Parameter]
    public IEnumerable<TItem> Items { get; set; }

    [Parameter]
    public int TotalSize { get; set; }

    [Parameter]
    public EventCallback<PagingParameters> OnScroll { get; set; }

    private async ValueTask<ItemsProviderResult<TItem>> LoadItems(ItemsProviderRequest request)
    {
        var count = Math.Min(request.Count, TotalSize - request.StartIndex);

        var pagingParameters = new PagingParameters
        {
            StartIndex = request.StartIndex,
                PageSize = count == 0 ? request.Count : count
        };

        await OnScroll.InvokeAsync(pagingParameters);

        return new ItemsProviderResult<TItem>(Items, TotalSize);
    }

}
