@page "/products"
@inject ProductService Api


<h3>ProductList</h3>

@if (products == null)
{
    <LoadingComponent>
        <Content>
            <img src="/icon-192.png" />
        </Content>
    </LoadingComponent>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Color</th>
                <th>Price</th>
                <th>Size</th>
                <th>Tags</th>
                <th>Edit</th>
            </tr>
        </thead>

        <tbody>
            
            @foreach(var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Color</td>
                    <td>@product.Price</td>
                    <td>@product.Size</td>
                    <td>
                        <ul class="horizontal">
                            @foreach(var tag in product.Tags)
                            {
                                <li>@tag.Title</li>
                            }

                            @*@string.Join(", ", @product.Tags.Select(t=>t.Title))*@
                        </ul>
                    </td>
                    <td>
                        <button @onclick=@(() => NavigateToProduct(product.Id))><span class="oi oi-box"/></button>
                    </td>
                </tr>                
            }
        </tbody>

        <tfoot>
            <tr>
                <td>Count: @products.Count()</td>
            </tr>
        </tfoot>

    </table>
}

@code {
    private IEnumerable<Product> products;

    [Inject]
    public IJSInProcessRuntime JS { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(TimeSpan.FromSeconds(5));

        products = await Api.GetProducts();
    }

    private async Task NavigateToProduct(int id)
    {        
        var product = products.SingleOrDefault(p => p.Id == id);
        var json = System.Text.Json.JsonSerializer.Serialize(product);

        // TODO: budować klucz na podstawie routingu zamiast samodzielnie
        var key = $"selectedProduct-{id}";
        JS.InvokeVoid("localStorage.setItem", key, json);

        NavigationManager.NavigateTo($"/products/{id}");
    }
}
