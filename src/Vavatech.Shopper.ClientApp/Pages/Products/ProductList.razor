@page "/products"
@inject ProductService Api


<h3>ProductList</h3>

@if (products == null)
{
    <LoadingComponent>
        <Content>
            <img src="/icon-192.png" />
        </Content>
    </LoadingComponent>
}
else
{
    <TableTemplate Items="@products" TItem="Product" Context="product" Columns="@columns">
        <RowTemplate>

            <ProductComponent product="@product" />
            
            <td>
                <button @onclick=@(() => NavigateToProduct(product.Id))><span class="oi oi-box" /></button>
            </td>

        </RowTemplate>
    </TableTemplate>
}

@code {
    private IEnumerable<Product> products;

    private IEnumerable<string> columns = new List<string> { "Name", "Color", "Price", "Size", "Tags" };

    [Inject]
    public IJSInProcessRuntime JS { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(TimeSpan.FromSeconds(2));

        products = await Api.GetProducts();
    }

    private async Task NavigateToProduct(int id)
    {
        var product = products.SingleOrDefault(p => p.Id == id);
        var json = System.Text.Json.JsonSerializer.Serialize(product);

        // TODO: budować klucz na podstawie routingu zamiast samodzielnie
        var key = $"selectedProduct-{id}";
        JS.InvokeVoid("localStorage.setItem", key, json);

        NavigationManager.NavigateTo($"/products/{id}");
    }
}
