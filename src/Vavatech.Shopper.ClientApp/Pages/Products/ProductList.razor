@page "/products"
@using Microsoft.AspNetCore.SignalR.Client
@inject ProductService Api
@inject HubConnection connection
@implements IAsyncDisposable

@*@attribute [Authorize]*@


<h3>ProductList</h3>

@if (products == null)
{
    <LoadingComponent>
        <Content>
            <img src="/icon-192.png" />
        </Content>
    </LoadingComponent>
}
else
{
    <SearchBarComponent OnSearch="HandleSearch" />

    <TableTemplate Items="@products" TItem="Product" OnScroll="GetProducts" TotalSize="TotalSize">
        <HeaderTemplate>
            <th>Name</th>
            <th>Description</th>
            <th>Color</th>
            <th>Price</th>
            <th>Size</th>
            <th>Tags</th>            
        </HeaderTemplate>

        <RowTemplate>
            <ProductComponent product="@context" />
            
            <td>
                <button @onclick=@(() => NavigateToProduct(context.Id))><span class="oi oi-eye" /></button>
                <button @onclick=@(()=> Edit(context.Id)) ><span class="oi oi-pencil" /></button>
                <button @onclick=@(()=> New())><span class="oi oi-credit-card" /></button>
            </td>

        </RowTemplate>
    </TableTemplate>
}

@code {
    private ICollection<Product> products;   

    public int TotalSize { get; set; }

    [Inject]
    public IJSInProcessRuntime JS { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //await Task.Delay(TimeSpan.FromSeconds(2));

        var response = await Api.Get(new PagingParameters { PageSize = 20, StartIndex = 0 });

        products = response.Items;

        connection.On<Product>("AddedProduct", product => {
            products.Add(product);

            Console.WriteLine(product.Name);

            StateHasChanged();
        });

        await connection.StartAsync();

    }

    public async ValueTask DisposeAsync()
    {
        await connection.StopAsync();
    }

    private void Edit(int id)
    {
        NavigationManager.NavigateTo($"/products/Edit/{id}");

    }

    private void New()
    {
        
    }

    private async Task NavigateToProduct(int id)
    {
        var product = products.SingleOrDefault(p => p.Id == id);
        var json = System.Text.Json.JsonSerializer.Serialize(product);

        var key = $"/products/{id}";

        JS.InvokeVoid("localStorage.setItem", key, json);

        NavigationManager.NavigateTo(key);
    }

    private async Task HandleSearch(string content)
    {
        await Task.Delay(TimeSpan.FromSeconds(2));

        var items = await Api.GetByContent(content);
        products = items.ToList();
    }

    private async Task GetProducts(PagingParameters pagingParameters)
    {
        var result = await Api.Get(pagingParameters);

        products = result.Items;
        TotalSize = result.TotalSize;
    }


}
